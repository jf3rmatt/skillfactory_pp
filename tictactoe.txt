board = [i for i in range(1, 10)]  # номера клеток на игровой доске


def game_board():  # вывод игровой доски на экран!
    print('_' * 4 * 3)
    for i in range(3):
        print((' ' * 3 + '|') * 3)
        print('', board[i * 3], '|', board[1 + i * 3], '|', board[2 + i * 3], '|')
        print(('_' * 3 + '|') * 3)


def gameplay(index, current_player):  # проверка клеток
    if index > 9 or index < 1 or board[index-1] in ('X', 'O'):
        return False

    board[index-1] = current_player
    return True


def check_win():  # проверка комбинаций для победы
    win = False
    win_combination = (
        (0,1,2),(3,4,5),(6,7,8),    # вертикаль
        (0,3,6),(1,4,7),(2,5,8),    # горизонталь
        (0,4,8),(2,4,6)             # диагональ
    )
    for i in win_combination:
        if board[i[0]] == board[i[1]] and board[i[1]] == board[i[2]]:
            win = board[i[0]]

    return win


def game():  # Игра, контроль игры
    print('Игра крестики-нолики!')
    game_board()
    current_player = 'X'
    step = 1

    while step < 10 or check_win() is False:
        try:
            index = int(input('Ходит игрок ' + current_player + '. Введите номер клетки(0 - Выход из игры):'))
            if index == 0:
                print('Вы вышли из игры.')
                break
            if gameplay(index, current_player):
                if current_player == 'X':
                    current_player = 'O'
                else:
                    current_player = 'X'
                game_board()
                step += 1
            else:
                print('Неверный ход, Повторите попытку.')
            if step == 10 and check_win() is False:
                print('Игра окончена. Ничья!')
                break

            if check_win():
                print(f'Игра окончена. Выиграл игрок {check_win()}')
                break
        except ValueError:
            print('Значение должно быть цифрой от 1 до 9, или 0 для выхода')



game()